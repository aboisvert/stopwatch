---
layout: default
title: Stopwatch
---

h2. Monitor your production Scala applications.

This API can be used to determine application performance bottlenecks,
user/application interactions, and application scalability. Each stopwatch
gathers summary statistics such as hits, execution times (total, average,
minimum, maximum, standard deviation), distribution, and simultaneous
requests or threads.

h2. Basic Usage

{% highlight scala %}
import stopwatch.Stopwatch

Stopwatch("test") {
// code being timed
}
{% endhighlight %}

h2. Usage for non-inlined code

{% highlight scala %}
val stopwatch = Stopwatch.start("test")

// and later, elsewhere in your code
stopwatch.stop()
{% endhighlight %}

h2. Defining distribution intervals

{% highlight scala %}
import stopwatch.Stopwatch
import stopwatch.StopwatchRange

// somewhere in your code, before using the stopwatch
// distribution:  0s to 15s in 500ms intervals
Stopwatch.range = StopwatchRange(0, 15000, 500)
{% endhighlight %}

h2. Resetting statistics

{% highlight scala %}
import stopwatch.Stopwatch

// somewhere in your code, before using the stopwatch
// distribution:  0s to 15s in 500ms intervals
Stopwatch.reset("test")
{% endhighlight %}

h2. Displaying statistics

{% highlight scala %}
stats = Stopwatch.snapshot("test")
Console.println(stats.toShortString)
Console.println(stats.toMediumString) // includes thread info
Console.println(stats.toLongString)   // includes threads + hit distribution
Console.println(stats)                // defaults to medium string
{% endhighlight %}

h2. Target platform

* Scala 2.7.4+ / 2.8+  (source compatible)
* JVM 1.5+

h2. License

Copyright (C) 2009-2010 by Alex Boisvert.

Stopwatch is is licensed under the terms of the "Apache Software License v2.0":http://www.apache.org/licenses/LICENSE-2.0.html
